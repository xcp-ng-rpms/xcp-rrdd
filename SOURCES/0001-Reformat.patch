From 6bc1a882b58a1f1096f747b5db6c28816d4c4445 Mon Sep 17 00:00:00 2001
From: Rob Hoes <rob.hoes@citrix.com>
Date: Fri, 19 Aug 2022 15:29:06 +0000
Subject: [PATCH 1/3] Reformat

---
 .ocamlformat              |   2 +-
 lib/stats.ml              |  26 ++++--
 rrdd/rrdd_ha_stats.ml     |   3 +-
 rrdd/rrdd_http_handler.ml |  21 +++--
 rrdd/rrdd_monitor.ml      |  50 +++++++----
 rrdd/rrdd_server.ml       |  97 +++++++++++++-------
 rrdd/rrdd_shared.ml       |  10 ++-
 rrdd/rrdd_stats.ml        |   6 +-
 rrdd/xcp_rrdd.ml          | 183 ++++++++++++++++++++++++--------------
 rrddump/rrddump.ml        |  10 ++-
 10 files changed, 269 insertions(+), 139 deletions(-)

diff --git a/.ocamlformat b/.ocamlformat
index b4d356a77..f86522707 100644
--- a/.ocamlformat
+++ b/.ocamlformat
@@ -1,5 +1,4 @@
 profile=ocamlformat
-version=0.14.1
 indicate-multiline-delimiters=closing-on-separate-line
 if-then-else=fit-or-vertical
 dock-collection-brackets=true
@@ -7,3 +6,4 @@ break-struct=natural
 break-separators=before
 break-infix=fit-or-vertical
 break-infix-before-func=false
+sequence-blank-line=preserve-one
diff --git a/lib/stats.ml b/lib/stats.ml
index 5a456eb65..c8f1f4308 100644
--- a/lib/stats.ml
+++ b/lib/stats.ml
@@ -79,7 +79,8 @@ let sample (name : string) (x : float) : unit =
           Normal_population.empty
       in
       let p' = Normal_population.sample p x' in
-      Hashtbl.replace timings name p')
+      Hashtbl.replace timings name p'
+  )
 
 (** Helper function to time a specific thing *)
 let time_this (name : string) f =
@@ -98,7 +99,8 @@ let time_this (name : string) f =
 
 let summarise () =
   Mutex.execute timings_m (fun () ->
-      Hashtbl.fold (fun k v acc -> (k, string_of v) :: acc) timings [])
+      Hashtbl.fold (fun k v acc -> (k, string_of v) :: acc) timings []
+  )
 
 (*****************************)
 (* Database stats            *)
@@ -153,7 +155,8 @@ let log_db_call task_opt dbcall ty =
               :: (try Hashtbl.find dbstats_task task with _ -> [])
               )
         | None ->
-            ())
+            ()
+    )
 
 let summarise_db_calls () =
   let string_of_ty = function
@@ -183,8 +186,10 @@ let summarise_db_calls () =
             ( k
             , List.map
                 (fun (dbcall, ty) -> (string_of_ty ty, dbcall))
-                (List.rev v) )
-            :: acc)
+                (List.rev v)
+            )
+            :: acc
+          )
           dbstats_task []
       , List.sort
           (fun (a, _) (b, _) -> compare a b)
@@ -193,6 +198,11 @@ let summarise_db_calls () =
                ( k
                , List.map
                    (fun (dbcall, ty) -> (string_of_ty ty, dbcall))
-                   (List.rev v) )
-               :: acc)
-             dbstats_threads []) ))
+                   (List.rev v)
+               )
+               :: acc
+             )
+             dbstats_threads []
+          )
+      )
+  )
diff --git a/rrdd/rrdd_ha_stats.ml b/rrdd/rrdd_ha_stats.ml
index 450a2715d..84a24e23a 100644
--- a/rrdd/rrdd_ha_stats.ml
+++ b/rrdd/rrdd_ha_stats.ml
@@ -69,4 +69,5 @@ let all () =
         in
         List.map (fun x -> (Rrd.Host, x)) all
       else
-        [])
+        []
+  )
diff --git a/rrdd/rrdd_http_handler.ml b/rrdd/rrdd_http_handler.ml
index 7d29ead2a..11bdaea32 100644
--- a/rrdd/rrdd_http_handler.ml
+++ b/rrdd/rrdd_http_handler.ml
@@ -27,7 +27,8 @@ let get_vm_rrd_handler (req : Http.Request.t) (s : Unix.file_descr) _ =
   let vm_uuid = List.assoc "uuid" query in
   let rrd =
     Mutex.execute mutex (fun () ->
-        Rrd.copy_rrd (Hashtbl.find vm_rrds vm_uuid).rrd)
+        Rrd.copy_rrd (Hashtbl.find vm_rrds vm_uuid).rrd
+    )
   in
   Http_svr.headers s (Http.http_200_ok ~version:"1.0" ~keep_alive:false ()) ;
   Rrd_unix.to_fd rrd s
@@ -45,7 +46,8 @@ let get_host_rrd_handler (req : Http.Request.t) (s : Unix.file_descr) _ =
               rrdi.rrd
           | None ->
               failwith "No host RRD available!"
-          ))
+          )
+    )
   in
   Http_svr.headers s
     (Http.http_200_ok ~version:"1.0" ~keep_alive:false ()
@@ -64,7 +66,8 @@ let get_sr_rrd_handler (req : Http.Request.t) (s : Unix.file_descr) _ =
           try Hashtbl.find sr_rrds sr_uuid
           with Not_found -> failwith "No SR RRD available!"
         in
-        Rrd.copy_rrd rrdi.rrd)
+        Rrd.copy_rrd rrdi.rrd
+    )
   in
   Http_svr.headers s (Http.http_200_ok ~version:"1.0" ~keep_alive:false ()) ;
   Rrd_unix.to_fd rrd s
@@ -86,7 +89,8 @@ let get_host_stats ?(json = false) ~(start : int64) ~(interval : int64)
             | Some rrdi ->
                 [
                   ( "host:" ^ Inventory.lookup Inventory._installation_uuid ^ ":"
-                  , rrdi.rrd )
+                  , rrdi.rrd
+                  )
                 ]
           else
             []
@@ -114,9 +118,11 @@ let get_host_stats ?(json = false) ~(start : int64) ~(interval : int64)
           Seq.map (fun (k, v) -> ("sr:" ^ k ^ ":", v.rrd)) srsandrrds
         in
         List.(
-          concat [host_rrds; of_seq vm_rrds_altered; of_seq sr_rrds_altered])
+          concat [host_rrds; of_seq vm_rrds_altered; of_seq sr_rrds_altered]
+        )
       in
-      Rrd_updates.export ~json prefixandrrds start interval cfopt)
+      Rrd_updates.export ~json prefixandrrds start interval cfopt
+  )
 
 (* Writes XML/JSON representing the updates since the specified start time to
    the file descriptor that corresponds to the client HTTP connection. *)
@@ -192,5 +198,6 @@ let put_rrd_handler (req : Http.Request.t) (s : Unix.file_descr) _ =
     debug "Receiving RRD for resident VM uuid=%s. Replacing in hashtable." uuid ;
     let domid = int_of_string (List.assoc "domid" query) in
     Mutex.execute mutex (fun _ ->
-        Hashtbl.replace vm_rrds uuid {rrd; dss= []; domid})
+        Hashtbl.replace vm_rrds uuid {rrd; dss= []; domid}
+    )
   )
diff --git a/rrdd/rrdd_monitor.ml b/rrdd/rrdd_monitor.ml
index 475050f9d..bf9fec639 100644
--- a/rrdd/rrdd_monitor.ml
+++ b/rrdd/rrdd_monitor.ml
@@ -19,8 +19,11 @@ let create_rras use_min_max =
               ; Rrd.rra_create Rrd.CF_Max n ns 1.0
               ]
             else
-              [Rrd.rra_create Rrd.CF_Average n ns 0.5])
-          timescales))
+              [Rrd.rra_create Rrd.CF_Average n ns 0.5]
+          )
+          timescales
+       )
+    )
 
 let step = 5L
 
@@ -34,10 +37,13 @@ let create_fresh_rrd use_min_max dss =
            if ds.ds_default then
              Some
                (Rrd.ds_create ds.ds_name ds.ds_type ~mrhb:300.0 ~max:ds.ds_max
-                  ~min:ds.ds_min Rrd.VT_Unknown)
+                  ~min:ds.ds_min Rrd.VT_Unknown
+               )
            else
-             None)
-         dss)
+             None
+         )
+         dss
+      )
   in
   Rrd.rrd_create dss rras step (Unix.gettimeofday ())
 
@@ -52,7 +58,8 @@ let merge_new_dss rrd dss =
   List.fold_left
     (fun rrd ds ->
       rrd_add_ds rrd now
-        (Rrd.ds_create ds.ds_name ds.Ds.ds_type ~mrhb:300.0 Rrd.VT_Unknown))
+        (Rrd.ds_create ds.ds_name ds.Ds.ds_type ~mrhb:300.0 Rrd.VT_Unknown)
+    )
     rrd new_dss
 
 (** Updates all of the hosts rrds. We are passed a list of uuids that is used as
@@ -74,7 +81,8 @@ let update_rrds timestamp dss (uuid_domids : (string * int) list) paused_vms =
             (false, 0.)
         | Some rrdi ->
             ( rrdi.rrd.Rrd.last_updated > timestamp
-            , abs_float (timestamp -. rrdi.rrd.Rrd.last_updated) )
+            , abs_float (timestamp -. rrdi.rrd.Rrd.last_updated)
+            )
       in
       if out_of_date then
         error
@@ -90,7 +98,8 @@ let update_rrds timestamp dss (uuid_domids : (string * int) list) paused_vms =
                 | VM x ->
                     if x = vm_uuid then Some ds else None
                 | _ ->
-                    None)
+                    None
+              )
               dss
           in
           (* First, potentially update the rrd with any new default dss *)
@@ -106,8 +115,10 @@ let update_rrds timestamp dss (uuid_domids : (string * int) list) paused_vms =
               Rrd.ds_update_named rrd timestamp ~new_domid:(domid <> rrdi.domid)
                 (List.map
                    (fun ds ->
-                     (ds.ds_name, (ds.ds_value, ds.ds_pdp_transform_function)))
-                   dss) ;
+                     (ds.ds_name, (ds.ds_value, ds.ds_pdp_transform_function))
+                   )
+                   dss
+                ) ;
               rrdi.dss <- dss ;
               rrdi.domid <- domid
             )
@@ -130,7 +141,8 @@ let update_rrds timestamp dss (uuid_domids : (string * int) list) paused_vms =
                 | SR x ->
                     if x = sr_uuid then Some ds else None
                 | _ ->
-                    None)
+                    None
+              )
               dss
           in
           (* First, potentially update the rrd with any new default dss *)
@@ -141,8 +153,10 @@ let update_rrds timestamp dss (uuid_domids : (string * int) list) paused_vms =
             Rrd.ds_update_named rrd timestamp ~new_domid:false
               (List.map
                  (fun ds ->
-                   (ds.ds_name, (ds.ds_value, ds.ds_pdp_transform_function)))
-                 dss) ;
+                   (ds.ds_name, (ds.ds_value, ds.ds_pdp_transform_function))
+                 )
+                 dss
+              ) ;
             rrdi.dss <- dss ;
             rrdi.domid <- 0
           with
@@ -156,7 +170,8 @@ let update_rrds timestamp dss (uuid_domids : (string * int) list) paused_vms =
       in
       List.to_seq dss
       |> Seq.filter_map (fun (ty, _ds) ->
-             match ty with SR x -> Some x | _ -> None)
+             match ty with SR x -> Some x | _ -> None
+         )
       |> StringSet.of_seq
       |> StringSet.iter do_sr ;
       let host_dss =
@@ -177,5 +192,8 @@ let update_rrds timestamp dss (uuid_domids : (string * int) list) paused_vms =
           Rrd.ds_update_named rrd timestamp ~new_domid:false
             (List.map
                (fun ds ->
-                 (ds.ds_name, (ds.ds_value, ds.ds_pdp_transform_function)))
-               host_dss))
+                 (ds.ds_name, (ds.ds_value, ds.ds_pdp_transform_function))
+               )
+               host_dss
+            )
+  )
diff --git a/rrdd/rrdd_server.ml b/rrdd/rrdd_server.ml
index b6640616e..a1f5e6fba 100644
--- a/rrdd/rrdd_server.ml
+++ b/rrdd/rrdd_server.ml
@@ -32,7 +32,8 @@ let archive_sr_rrd (sr_uuid : string) : string =
           rrd
         with Not_found ->
           let msg = Printf.sprintf "No RRD found for SR: %s." sr_uuid in
-          raise (Rrdd_error (Archive_failed msg)))
+          raise (Rrdd_error (Archive_failed msg))
+    )
   in
   try
     archive_rrd_internal ~uuid:sr_uuid ~rrd:sr_rrd.rrd () ;
@@ -59,7 +60,8 @@ let push_sr_rrd (sr_uuid : string) (path : string) : unit =
     let rrd = rrd_of_gzip path in
     debug "Pushing RRD for SR uuid=%s locally" sr_uuid ;
     Mutex.execute mutex (fun _ ->
-        Hashtbl.replace sr_rrds sr_uuid {rrd; dss= []; domid= 0})
+        Hashtbl.replace sr_rrds sr_uuid {rrd; dss= []; domid= 0}
+    )
   with _ -> ()
 
 let has_vm_rrd (vm_uuid : string) =
@@ -71,7 +73,8 @@ let archive_rrd vm_uuid remote_address : unit =
         let rrd = (Hashtbl.find vm_rrds vm_uuid).rrd in
         Hashtbl.remove vm_rrds vm_uuid ;
         archive_rrd_internal ~remote_address ~uuid:vm_uuid ~rrd ()
-      with Not_found -> ())
+      with Not_found -> ()
+  )
 
 let backup_rrds (remote_address : string option) () : unit =
   debug "backing up rrds %s"
@@ -95,7 +98,8 @@ let backup_rrds (remote_address : string option) () : unit =
         (fun (uuid, rrd) ->
           debug "Backup: saving RRD for VM uuid=%s to local disk" uuid ;
           let rrd = Mutex.execute mutex (fun () -> Rrd.copy_rrd rrd) in
-          archive_rrd_internal ~remote_address ~uuid ~rrd ())
+          archive_rrd_internal ~remote_address ~uuid ~rrd ()
+        )
         vrrds ;
       Mutex.lock mutex ;
       let srrds =
@@ -107,7 +111,8 @@ let backup_rrds (remote_address : string option) () : unit =
         (fun (uuid, rrd) ->
           debug "Backup: saving RRD for SR uuid=%s to local disk" uuid ;
           let rrd = Mutex.execute mutex (fun () -> Rrd.copy_rrd rrd) in
-          archive_rrd_internal ~uuid ~rrd ())
+          archive_rrd_internal ~uuid ~rrd ()
+        )
         srrds ;
       match !host_rrd with
       | Some rrdi ->
@@ -163,14 +168,16 @@ module Deprecated = struct
                in
                let input = Xmlm.make_input (`String (0, body)) in
                debug "Pulled rrd for uuid=%s" uuid ;
-               Rrd.from_xml input))
+               Rrd.from_xml input
+       )
+      )
 
   (* DEPRECATED *)
   (* This used to be called from dbsync in two cases: 1. For the local host
      after a xapi restart or host restart. 2. For running VMs after a xapi
      restart. It is now only used to load the host's RRD after xapi restart. *)
-  let load_rrd (uuid : string) (timescale : int)
-      (master_address : string option) : unit =
+  let load_rrd (uuid : string) (timescale : int) (master_address : string option)
+      : unit =
     try
       let rrd =
         try
@@ -219,7 +226,8 @@ let push_rrd_local vm_uuid domid : unit =
     let rrd = get_rrd ~vm_uuid in
     debug "Pushing RRD for VM uuid=%s locally" vm_uuid ;
     Mutex.execute mutex (fun _ ->
-        Hashtbl.replace vm_rrds vm_uuid {rrd; dss= []; domid})
+        Hashtbl.replace vm_rrds vm_uuid {rrd; dss= []; domid}
+    )
   with _ -> ()
 
 let push_rrd_remote vm_uuid remote_address : unit =
@@ -250,7 +258,8 @@ let migrate_rrd (session_id : string option) (remote_address : string)
           debug "Sending RRD for VM uuid=%s to remote host %s for migrate"
             vm_uuid host_uuid ;
           Hashtbl.remove vm_rrds vm_uuid ;
-          rrdi)
+          rrdi
+      )
     in
     send_rrd ?session_id ~address:remote_address ~to_archive:false ~uuid:vm_uuid
       ~rrd:rrdi.rrd ()
@@ -291,7 +300,8 @@ let add_host_ds (ds_name : string) : unit =
           ()
       | Some rrdi ->
           let rrd = add_ds ~rrdi ~ds_name in
-          host_rrd := Some {rrdi with rrd})
+          host_rrd := Some {rrdi with rrd}
+  )
 
 let forget_host_ds (ds_name : string) : unit =
   Mutex.execute mutex (fun () ->
@@ -299,7 +309,8 @@ let forget_host_ds (ds_name : string) : unit =
       | None ->
           ()
       | Some rrdi ->
-          host_rrd := Some {rrdi with rrd= Rrd.rrd_remove_ds rrdi.rrd ds_name})
+          host_rrd := Some {rrdi with rrd= Rrd.rrd_remove_ds rrdi.rrd ds_name}
+  )
 
 let query_possible_dss rrdi =
   (* We have data sources coming from different places, so we want the union of
@@ -332,7 +343,9 @@ let query_possible_dss rrdi =
              ; min= ds.ds_min
              ; max= ds.ds_max
              ; units= ds.ds_units
-             } ))
+             }
+           )
+       )
     |> SMap.of_seq
   in
   let name_to_disabled_dss =
@@ -351,7 +364,9 @@ let query_possible_dss rrdi =
                  ; units= "unknown"
                  ; min= ds.ds_min
                  ; max= ds.ds_max
-                 } ))
+                 }
+               )
+       )
   in
   SMap.add_seq name_to_disabled_dss name_to_live_dss
   |> SMap.to_seq
@@ -360,7 +375,8 @@ let query_possible_dss rrdi =
 
 let query_possible_host_dss () : Data_source.t list =
   Mutex.execute mutex (fun () ->
-      match !host_rrd with None -> [] | Some rrdi -> query_possible_dss rrdi)
+      match !host_rrd with None -> [] | Some rrdi -> query_possible_dss rrdi
+  )
 
 let query_host_ds (ds_name : string) : float =
   let now = Unix.gettimeofday () in
@@ -369,7 +385,8 @@ let query_host_ds (ds_name : string) : float =
       | None ->
           failwith "No data source!"
       | Some rrdi ->
-          Rrd.query_named_ds rrdi.rrd now ds_name Rrd.CF_Average)
+          Rrd.query_named_ds rrdi.rrd now ds_name Rrd.CF_Average
+  )
 
 (** {add_vm_ds vm_uuid domid ds_name} enables collection of the data produced by
     the data sourced with name {ds_name} for the VM {vm_uuid} into a time series
@@ -380,25 +397,29 @@ let add_vm_ds (vm_uuid : string) (domid : int) (ds_name : string) : unit =
   Mutex.execute mutex (fun () ->
       let rrdi = Hashtbl.find vm_rrds vm_uuid in
       let rrd = add_ds ~rrdi ~ds_name in
-      Hashtbl.replace vm_rrds vm_uuid {rrd; dss= rrdi.dss; domid})
+      Hashtbl.replace vm_rrds vm_uuid {rrd; dss= rrdi.dss; domid}
+  )
 
 let forget_vm_ds (vm_uuid : string) (ds_name : string) : unit =
   Mutex.execute mutex (fun () ->
       let rrdi = Hashtbl.find vm_rrds vm_uuid in
       let rrd = rrdi.rrd in
       Hashtbl.replace vm_rrds vm_uuid
-        {rrdi with rrd= Rrd.rrd_remove_ds rrd ds_name})
+        {rrdi with rrd= Rrd.rrd_remove_ds rrd ds_name}
+  )
 
 let query_possible_vm_dss (vm_uuid : string) : Data_source.t list =
   Mutex.execute mutex (fun () ->
       let rrdi = Hashtbl.find vm_rrds vm_uuid in
-      query_possible_dss rrdi)
+      query_possible_dss rrdi
+  )
 
 let query_vm_ds (vm_uuid : string) (ds_name : string) : float =
   let now = Unix.gettimeofday () in
   Mutex.execute mutex (fun () ->
       let rrdi = Hashtbl.find vm_rrds vm_uuid in
-      Rrd.query_named_ds rrdi.rrd now ds_name Rrd.CF_Average)
+      Rrd.query_named_ds rrdi.rrd now ds_name Rrd.CF_Average
+  )
 
 (** {add_sr_ds sr_uuid domid ds_name} enables collection of the data produced by
     the data source with name {ds_name} for the SR {sr_uuid} into a time series
@@ -409,27 +430,31 @@ let add_sr_ds (sr_uuid : string) (ds_name : string) : unit =
   Mutex.execute mutex (fun () ->
       let rrdi = Hashtbl.find sr_rrds sr_uuid in
       let rrd = add_ds ~rrdi ~ds_name in
-      Hashtbl.replace sr_rrds sr_uuid {rrd; dss= rrdi.dss; domid= 0})
+      Hashtbl.replace sr_rrds sr_uuid {rrd; dss= rrdi.dss; domid= 0}
+  )
 
 let forget_sr_ds (sr_uuid : string) (ds_name : string) : unit =
   Mutex.execute mutex (fun () ->
       let rrdi = Hashtbl.find sr_rrds sr_uuid in
       let rrd = rrdi.rrd in
       Hashtbl.replace sr_rrds sr_uuid
-        {rrdi with rrd= Rrd.rrd_remove_ds rrd ds_name})
+        {rrdi with rrd= Rrd.rrd_remove_ds rrd ds_name}
+  )
 
 let query_possible_sr_dss (sr_uuid : string) : Data_source.t list =
   Mutex.execute mutex (fun () ->
       try
         let rrdi = Hashtbl.find sr_rrds sr_uuid in
         query_possible_dss rrdi
-      with Not_found -> [])
+      with Not_found -> []
+  )
 
 let query_sr_ds (sr_uuid : string) (ds_name : string) : float =
   let now = Unix.gettimeofday () in
   Mutex.execute mutex (fun () ->
       let rrdi = Hashtbl.find sr_rrds sr_uuid in
-      Rrd.query_named_ds rrdi.rrd now ds_name Rrd.CF_Average)
+      Rrd.query_named_ds rrdi.rrd now ds_name Rrd.CF_Average
+  )
 
 let update_use_min_max (value : bool) : unit =
   debug "Updating use_min_max: New value=%b" value ;
@@ -437,7 +462,8 @@ let update_use_min_max (value : bool) : unit =
 
 let update_vm_memory_target (domid : int) (target : int64) : unit =
   Mutex.execute memory_targets_m (fun _ ->
-      Hashtbl.replace memory_targets domid target)
+      Hashtbl.replace memory_targets domid target
+  )
 
 let set_cache_sr (sr_uuid : string) : unit =
   Mutex.execute cache_sr_lock (fun () -> cache_sr_uuid := Some sr_uuid)
@@ -526,7 +552,8 @@ module Plugin = struct
             let skips = min (plugin.skip_init * 2) skip_max in
             plugin.skip_init <- skips ;
             plugin.skip <- skips ;
-            skips)
+            skips
+        )
         |> debug "setting skip-cycles-after-error for plugin %s to %d"
              (P.string_of_uid ~uid)
 
@@ -537,7 +564,8 @@ module Plugin = struct
             (P.string_of_uid ~uid) ;
           Mutex.execute registered_m (fun () ->
               plugin.skip_init <- 1 ;
-              plugin.skip <- 0)
+              plugin.skip <- 0
+          )
         )
 
       (* true, iff the plugin skips the next reading *)
@@ -579,7 +607,8 @@ module Plugin = struct
         let open Rrdd_shared in
         if Mutex.execute registered_m (fun _ -> Hashtbl.mem registered uid) then
           Mutex.execute last_loop_end_time_m (fun _ ->
-              !last_loop_end_time +. !timeslice -. Unix.gettimeofday ())
+              !last_loop_end_time +. !timeslice -. Unix.gettimeofday ()
+          )
         else
           -1.
 
@@ -598,7 +627,8 @@ module Plugin = struct
               let reader =
                 P.make_reader ~uid ~info ~protocol:(choose_protocol protocol)
               in
-              Hashtbl.add registered uid {info; reader; skip_init= 1; skip= 0}) ;
+              Hashtbl.add registered uid {info; reader; skip_init= 1; skip= 0}
+        ) ;
         next_reading uid
 
       (* The function deregisters a plugin. After this call, the framework will
@@ -609,13 +639,15 @@ module Plugin = struct
               let plugin = Hashtbl.find registered uid in
               plugin.reader.Rrd_reader.cleanup () ;
               Hashtbl.remove registered uid
-            ))
+            )
+        )
 
       (* Read, parse, and combine metrics from all registered plugins. *)
       let read_stats () : (Rrd.ds_owner * Ds.ds) list =
         let plugins =
           Mutex.execute registered_m (fun _ ->
-              List.of_seq (Hashtbl.to_seq registered))
+              List.of_seq (Hashtbl.to_seq registered)
+          )
         in
         let process_plugin acc (uid, plugin) =
           try
@@ -684,7 +716,8 @@ module HA = struct
         Rrdd_ha_stats.enabled := true ;
         Rrdd_ha_stats.Statefile_latency.all := statefile_latencies ;
         Rrdd_ha_stats.Heartbeat_latency.raw := Some heartbeat_latency ;
-        Rrdd_ha_stats.Xapi_latency.raw := Some xapi_latency)
+        Rrdd_ha_stats.Xapi_latency.raw := Some xapi_latency
+    )
 
   let disable () =
     Mutex.execute Rrdd_ha_stats.m (fun _ -> Rrdd_ha_stats.enabled := false)
diff --git a/rrdd/rrdd_shared.ml b/rrdd/rrdd_shared.ml
index e7a67bb55..2f3c65cb0 100644
--- a/rrdd/rrdd_shared.ml
+++ b/rrdd/rrdd_shared.ml
@@ -101,7 +101,8 @@ let rrd_of_gzip path =
   in
   if gz_exists then
     Xapi_stdext_unix.Unixext.with_file gz_path [Unix.O_RDONLY] 0o0 (fun fd ->
-        Gzip.decompress_passive fd rrd_of_fd)
+        Gzip.decompress_passive fd rrd_of_fd
+    )
   else (* If this fails, let the exception propagate *)
     Xapi_stdext_unix.Unixext.with_file path [Unix.O_RDONLY] 0 rrd_of_fd
 
@@ -127,7 +128,9 @@ let send_rrd ?(session_id : string option) ~(address : string)
   let transport = SSL (SSL.make (), address, !https_port) in
   with_transport transport
     (with_http request (fun (_response, fd) ->
-         try Rrd_unix.to_fd rrd fd with _ -> log_backtrace ())) ;
+         try Rrd_unix.to_fd rrd fd with _ -> log_backtrace ()
+     )
+    ) ;
   debug "Sending RRD complete."
 
 let archive_rrd_internal ?(remote_address = None) ~uuid ~rrd () =
@@ -149,7 +152,8 @@ let archive_rrd_internal ?(remote_address = None) ~uuid ~rrd () =
             0o755 ;
           let base_filename = Rrdd_libs.Constants.rrd_location ^ "/" ^ uuid in
           Xapi_stdext_unix.Unixext.atomic_write_to_file (base_filename ^ ".gz")
-            0o644 (fun fd -> Gzip.compress fd (Rrd_unix.to_fd rrd)) ;
+            0o644 (fun fd -> Gzip.compress fd (Rrd_unix.to_fd rrd)
+          ) ;
           (* If there's an uncompressed one hanging around, remove it. *)
           Xapi_stdext_unix.Unixext.unlink_safe base_filename
         ) else
diff --git a/rrdd/rrdd_stats.ml b/rrdd/rrdd_stats.ml
index 3a3d4aa49..09ffd401a 100644
--- a/rrdd/rrdd_stats.ml
+++ b/rrdd/rrdd_stats.ml
@@ -107,7 +107,8 @@ let meminfo () =
       | ["SwapFree:"; x; "kB"] ->
           swap_free := int_of_string x
       | _ ->
-          ())
+          ()
+    )
     Astring.String.(cuts ~sep:"\n" all) ;
   {
     total= !total
@@ -160,7 +161,8 @@ let process_memory_info_of_pid (pid : int) : process_memory_info =
       | ["VmLib:"; x; "kB"] ->
           lib := int_of_string x
       | _ ->
-          ())
+          ()
+    )
     Astring.String.(cuts ~sep:"\n" all) ;
   {
     peak= !peak
diff --git a/rrdd/xcp_rrdd.ml b/rrdd/xcp_rrdd.ml
index 2552b091a..785e576bc 100644
--- a/rrdd/xcp_rrdd.ml
+++ b/rrdd/xcp_rrdd.ml
@@ -62,10 +62,14 @@ let accept_forever sock f =
                 (fun _ ->
                   finally
                     (fun _ -> f this_connection)
-                    (fun _ -> Unix.close this_connection))
-                ())
-         done)
-       ())
+                    (fun _ -> Unix.close this_connection)
+                )
+                ()
+             )
+         done
+       )
+       ()
+    )
 
 (* Bind server to the file descriptor. *)
 let start (xmlrpc_path, http_fwd_path) process =
@@ -109,8 +113,10 @@ let start (xmlrpc_path, http_fwd_path) process =
             |> Http.Request.t_of_rpc
           in
           req.Http.Request.close <- true ;
-          ignore_bool (Http_svr.handle_one server received_fd () req))
-        (fun _ -> Unix.close received_fd)) ;
+          ignore_bool (Http_svr.handle_one server received_fd () req)
+        )
+        (fun _ -> Unix.close received_fd)
+  ) ;
   ()
 
 (* Monitoring code --- START. *)
@@ -216,7 +222,8 @@ let dss_vcpus xc doms =
              mask of its complement ~(1 << 63) *)
           let cpu_time =
             Int64.(
-              to_float @@ logand vcpuinfo.Xenctrl.cputime xen_flag_complement)
+              to_float @@ logand vcpuinfo.Xenctrl.cputime xen_flag_complement
+            )
           in
           (* Convert from nanoseconds to seconds *)
           let cpu_time = cpu_time /. 1.0e9 in
@@ -225,7 +232,8 @@ let dss_vcpus xc doms =
             , Ds.ds_make ~name:(Printf.sprintf "cpu%d" i) ~units:"(fraction)"
                 ~description:(Printf.sprintf "CPU%d usage" i)
                 ~value:(Rrd.VT_Float cpu_time) ~ty:Rrd.Derive ~default:true
-                ~min:0.0 ~max:1.0 () )
+                ~min:0.0 ~max:1.0 ()
+            )
           in
           cpus (i + 1) (cputime_rrd :: dss)
       in
@@ -237,52 +245,54 @@ let dss_vcpus xc doms =
           , Ds.ds_make ~name:"runstate_fullrun" ~units:"(fraction)"
               ~value:(Rrd.VT_Float (Int64.to_float ri.Xenctrl.time0 /. 1.0e9))
               ~description:"Fraction of time that all VCPUs are running"
-              ~ty:Rrd.Derive ~default:false ~min:0.0 () )
+              ~ty:Rrd.Derive ~default:false ~min:0.0 ()
+          )
           :: ( Rrd.VM uuid
              , Ds.ds_make ~name:"runstate_full_contention" ~units:"(fraction)"
-                 ~value:
-                   (Rrd.VT_Float (Int64.to_float ri.Xenctrl.time1 /. 1.0e9))
+                 ~value:(Rrd.VT_Float (Int64.to_float ri.Xenctrl.time1 /. 1.0e9))
                  ~description:
                    "Fraction of time that all VCPUs are runnable (i.e., \
                     waiting for CPU)"
-                 ~ty:Rrd.Derive ~default:false ~min:0.0 () )
+                 ~ty:Rrd.Derive ~default:false ~min:0.0 ()
+             )
           :: ( Rrd.VM uuid
              , Ds.ds_make ~name:"runstate_concurrency_hazard"
                  ~units:"(fraction)"
-                 ~value:
-                   (Rrd.VT_Float (Int64.to_float ri.Xenctrl.time2 /. 1.0e9))
+                 ~value:(Rrd.VT_Float (Int64.to_float ri.Xenctrl.time2 /. 1.0e9))
                  ~description:
                    "Fraction of time that some VCPUs are running and some are \
                     runnable"
-                 ~ty:Rrd.Derive ~default:false ~min:0.0 () )
+                 ~ty:Rrd.Derive ~default:false ~min:0.0 ()
+             )
           :: ( Rrd.VM uuid
              , Ds.ds_make ~name:"runstate_blocked" ~units:"(fraction)"
-                 ~value:
-                   (Rrd.VT_Float (Int64.to_float ri.Xenctrl.time3 /. 1.0e9))
+                 ~value:(Rrd.VT_Float (Int64.to_float ri.Xenctrl.time3 /. 1.0e9))
                  ~description:
                    "Fraction of time that all VCPUs are blocked or offline"
-                 ~ty:Rrd.Derive ~default:false ~min:0.0 () )
+                 ~ty:Rrd.Derive ~default:false ~min:0.0 ()
+             )
           :: ( Rrd.VM uuid
              , Ds.ds_make ~name:"runstate_partial_run" ~units:"(fraction)"
-                 ~value:
-                   (Rrd.VT_Float (Int64.to_float ri.Xenctrl.time4 /. 1.0e9))
+                 ~value:(Rrd.VT_Float (Int64.to_float ri.Xenctrl.time4 /. 1.0e9))
                  ~description:
                    "Fraction of time that some VCPUs are running, and some are \
                     blocked"
-                 ~ty:Rrd.Derive ~default:false ~min:0.0 () )
+                 ~ty:Rrd.Derive ~default:false ~min:0.0 ()
+             )
           :: ( Rrd.VM uuid
              , Ds.ds_make ~name:"runstate_partial_contention"
                  ~units:"(fraction)"
-                 ~value:
-                   (Rrd.VT_Float (Int64.to_float ri.Xenctrl.time5 /. 1.0e9))
+                 ~value:(Rrd.VT_Float (Int64.to_float ri.Xenctrl.time5 /. 1.0e9))
                  ~description:
                    "Fraction of time that some VCPUs are runnable and some are \
                     blocked"
-                 ~ty:Rrd.Derive ~default:false ~min:0.0 () )
+                 ~ty:Rrd.Derive ~default:false ~min:0.0 ()
+             )
           :: dss
         with _ -> dss
       in
-      try cpus 0 dss with _ -> dss)
+      try cpus 0 dss with _ -> dss
+    )
     [] doms
 
 let physcpus = ref [||]
@@ -307,9 +317,12 @@ let dss_pcpus xc =
               ~value:(Rrd.VT_Float (Int64.to_float v /. 1.0e9))
               ~min:0.0 ~max:1.0 ~ty:Rrd.Derive ~default:true
               ~transform:(fun x -> 1.0 -. x)
-              () )
+              ()
+          )
           :: acc
-        , i + 1 ))
+        , i + 1
+        )
+      )
       ([], 0) newinfos
   in
   let sum_array = Array.fold_left (fun acc v -> Int64.add acc v) 0L newinfos in
@@ -321,7 +334,8 @@ let dss_pcpus xc =
         ~value:(Rrd.VT_Float (avg_array /. 1.0e9))
         ~min:0.0 ~max:1.0 ~ty:Rrd.Derive ~default:true
         ~transform:(fun x -> 1.0 -. x)
-        () )
+        ()
+    )
   in
   avgcpu_ds :: dss
 
@@ -331,7 +345,8 @@ let dss_loadavg () =
     , Ds.ds_make ~name:"loadavg" ~units:"(fraction)"
         ~description:"Domain0 loadavg"
         ~value:(Rrd.VT_Float (Rrdd_common.loadavg ()))
-        ~ty:Rrd.Gauge ~default:true () )
+        ~ty:Rrd.Gauge ~default:true ()
+    )
   ]
 
 (*****************************************************)
@@ -344,8 +359,7 @@ let dss_netdev doms =
       try List.find (fun (_, _, domid') -> domid = domid') domains
       with Not_found ->
         failwith
-          (Printf.sprintf "Failed to find uuid corresponding to domid: %d"
-             domid)
+          (Printf.sprintf "Failed to find uuid corresponding to domid: %d" domid)
     in
     uuid
   in
@@ -361,28 +375,33 @@ let dss_netdev doms =
                 ~description:
                   ("Bytes per second received on physical interface " ^ dev)
                 ~units:"B/s" ~value:(Rrd.VT_Int64 stat.rx_bytes) ~ty:Rrd.Derive
-                ~min:0.0 ~default:true () )
+                ~min:0.0 ~default:true ()
+            )
             :: ( Rrd.Host
                , Ds.ds_make ~name:(pif_name ^ "_tx")
                    ~description:
                      ("Bytes per second sent on physical interface " ^ dev)
                    ~units:"B/s" ~value:(Rrd.VT_Int64 stat.tx_bytes)
-                   ~ty:Rrd.Derive ~min:0.0 ~default:true () )
+                   ~ty:Rrd.Derive ~min:0.0 ~default:true ()
+               )
             :: ( Rrd.Host
                , Ds.ds_make ~name:(pif_name ^ "_rx_errors")
                    ~description:
                      ("Receive errors per second on physical interface " ^ dev)
                    ~units:"err/s" ~value:(Rrd.VT_Int64 stat.rx_errors)
-                   ~ty:Rrd.Derive ~min:0.0 ~default:false () )
+                   ~ty:Rrd.Derive ~min:0.0 ~default:false ()
+               )
             :: ( Rrd.Host
                , Ds.ds_make ~name:(pif_name ^ "_tx_errors")
                    ~description:
                      ("Transmit errors per second on physical interface " ^ dev)
                    ~units:"err/s" ~value:(Rrd.VT_Int64 stat.tx_errors)
-                   ~ty:Rrd.Derive ~min:0.0 ~default:false () )
+                   ~ty:Rrd.Derive ~min:0.0 ~default:false ()
+               )
             :: dss
           , Int64.add stat.rx_bytes sum_rx
-          , Int64.add stat.tx_bytes sum_tx )
+          , Int64.add stat.tx_bytes sum_tx
+          )
         else
           ( ( try
                 let d1, d2 =
@@ -401,7 +420,8 @@ let dss_netdev doms =
                       ^ "'"
                       )
                     ~value:(Rrd.VT_Int64 stat.rx_bytes) ~ty:Rrd.Derive ~min:0.0
-                    ~default:true () )
+                    ~default:true ()
+                )
                 :: ( Rrd.VM uuid
                    , Ds.ds_make ~name:(vif_name ^ "_rx") ~units:"B/s"
                        ~description:
@@ -411,7 +431,8 @@ let dss_netdev doms =
                          ^ "'"
                          )
                        ~value:(Rrd.VT_Int64 stat.tx_bytes) ~ty:Rrd.Derive
-                       ~min:0.0 ~default:true () )
+                       ~min:0.0 ~default:true ()
+                   )
                 :: ( Rrd.VM uuid
                    , Ds.ds_make ~name:(vif_name ^ "_rx_errors") ~units:"err/s"
                        ~description:
@@ -421,7 +442,8 @@ let dss_netdev doms =
                          ^ "'"
                          )
                        ~value:(Rrd.VT_Int64 stat.tx_errors) ~ty:Rrd.Derive
-                       ~min:0.0 ~default:false () )
+                       ~min:0.0 ~default:false ()
+                   )
                 :: ( Rrd.VM uuid
                    , Ds.ds_make ~name:(vif_name ^ "_tx_errors") ~units:"err/s"
                        ~description:
@@ -431,12 +453,15 @@ let dss_netdev doms =
                          ^ "'"
                          )
                        ~value:(Rrd.VT_Int64 stat.rx_errors) ~ty:Rrd.Derive
-                       ~min:0.0 ~default:false () )
+                       ~min:0.0 ~default:false ()
+                   )
                 :: dss
               with _ -> dss
             )
           , sum_rx
-          , sum_tx ))
+          , sum_tx
+          )
+      )
       ([], 0L, 0L) stats
   in
   [
@@ -444,12 +469,14 @@ let dss_netdev doms =
     , Ds.ds_make ~name:"pif_aggr_rx"
         ~description:"Bytes per second received on all physical interfaces"
         ~units:"B/s" ~value:(Rrd.VT_Int64 sum_rx) ~ty:Rrd.Derive ~min:0.0
-        ~default:true () )
+        ~default:true ()
+    )
   ; ( Rrd.Host
     , Ds.ds_make ~name:"pif_aggr_tx"
         ~description:"Bytes per second sent on all physical interfaces"
         ~units:"B/s" ~value:(Rrd.VT_Int64 sum_tx) ~ty:Rrd.Derive ~min:0.0
-        ~default:true () )
+        ~default:true ()
+    )
   ]
   @ dss
 
@@ -468,12 +495,14 @@ let dss_mem_host xc =
     , Ds.ds_make ~name:"memory_total_kib"
         ~description:"Total amount of memory in the host"
         ~value:(Rrd.VT_Int64 total_kib) ~ty:Rrd.Gauge ~min:0.0 ~default:true
-        ~units:"KiB" () )
+        ~units:"KiB" ()
+    )
   ; ( Rrd.Host
     , Ds.ds_make ~name:"memory_free_kib"
         ~description:"Total amount of free memory"
         ~value:(Rrd.VT_Int64 free_kib) ~ty:Rrd.Gauge ~min:0.0 ~default:true
-        ~units:"KiB" () )
+        ~units:"KiB" ()
+    )
   ]
 
 (** estimate the space needed to serialize all the dss_mem_vms in a host. the
@@ -502,7 +531,8 @@ let dss_mem_vms doms =
       let memory_target_opt =
         try
           Mutex.execute Rrdd_shared.memory_targets_m (fun _ ->
-              Some (Hashtbl.find Rrdd_shared.memory_targets domid))
+              Some (Hashtbl.find Rrdd_shared.memory_targets domid)
+          )
         with Not_found -> None
       in
       let mem_target_ds =
@@ -512,7 +542,9 @@ let dss_mem_vms doms =
             , Ds.ds_make ~name:"memory_target"
                 ~description:"Target of VM balloon driver" ~units:"B"
                 ~value:(Rrd.VT_Int64 memory_target) ~ty:Rrd.Gauge ~min:0.0
-                ~default:true () ))
+                ~default:true ()
+            )
+          )
           memory_target_opt
       in
       let other_ds =
@@ -528,7 +560,8 @@ let dss_mem_vms doms =
               , Ds.ds_make ~name:"memory_internal_free" ~units:"KiB"
                   ~description:"Memory used as reported by the guest agent"
                   ~value:(Rrd.VT_Int64 mem_free) ~ty:Rrd.Gauge ~min:0.0
-                  ~default:true () )
+                  ~default:true ()
+              )
           with Not_found -> None
       in
       List.concat
@@ -536,7 +569,8 @@ let dss_mem_vms doms =
           main_mem_ds :: Option.to_list other_ds
         ; Option.to_list mem_target_ds
         ; acc
-        ])
+        ]
+    )
     [] doms
 
 (**** Local cache SR stuff *)
@@ -557,8 +591,7 @@ let tapdisk_cache_stats : string =
 
 let dss_cache timestamp =
   let cache_sr_opt =
-    Mutex.execute Rrdd_shared.cache_sr_lock (fun _ ->
-        !Rrdd_shared.cache_sr_uuid)
+    Mutex.execute Rrdd_shared.cache_sr_lock (fun _ -> !Rrdd_shared.cache_sr_uuid)
   in
   let do_read cache_sr =
     debug "do_read: %s %s" tapdisk_cache_stats cache_sr ;
@@ -586,7 +619,8 @@ let dss_cache timestamp =
           ~name:(Printf.sprintf "sr_%s_cache_size" cache_sr)
           ~description:"Size in bytes of the cache SR" ~units:"B"
           ~value:(Rrd.VT_Int64 newvals.cache_size_raw) ~ty:Rrd.Gauge ~min:0.0
-          ~default:true () )
+          ~default:true ()
+      )
     ; ( Rrd.Host
       , Ds.ds_make
           ~name:(Printf.sprintf "sr_%s_cache_hits" cache_sr)
@@ -595,8 +629,11 @@ let dss_cache timestamp =
             (Rrd.VT_Int64
                (Int64.div
                   (Int64.sub newvals.cache_hits_raw oldvals.cache_hits_raw)
-                  (Int64.of_float (newvals.time -. oldvals.time))))
-          ~ty:Rrd.Gauge ~min:0.0 ~default:true () )
+                  (Int64.of_float (newvals.time -. oldvals.time))
+               )
+            )
+          ~ty:Rrd.Gauge ~min:0.0 ~default:true ()
+      )
     ; ( Rrd.Host
       , Ds.ds_make
           ~name:(Printf.sprintf "sr_%s_cache_misses" cache_sr)
@@ -605,8 +642,11 @@ let dss_cache timestamp =
             (Rrd.VT_Int64
                (Int64.div
                   (Int64.sub newvals.cache_misses_raw oldvals.cache_misses_raw)
-                  (Int64.of_float (newvals.time -. oldvals.time))))
-          ~ty:Rrd.Gauge ~min:0.0 ~default:true () )
+                  (Int64.of_float (newvals.time -. oldvals.time))
+               )
+            )
+          ~ty:Rrd.Gauge ~min:0.0 ~default:true ()
+      )
     ]
   in
   match (!last_cache_stats, cache_sr_opt) with
@@ -722,7 +762,8 @@ let do_monitor_write xc writers =
       let stats = List.rev_append plugins_stats dom0_stats in
       Rrdd_stats.print_snapshot () ;
       let uuid_domids = List.map (fun (_, u, i) -> (u, i)) domains in
-      Rrdd_monitor.update_rrds timestamp stats uuid_domids my_paused_vms)
+      Rrdd_monitor.update_rrds timestamp stats uuid_domids my_paused_vms
+  )
 
 let monitor_write_loop writers =
   Debug.with_thread_named "monitor_write"
@@ -732,7 +773,8 @@ let monitor_write_loop writers =
             try
               do_monitor_write xc writers ;
               Mutex.execute Rrdd_shared.last_loop_end_time_m (fun _ ->
-                  Rrdd_shared.last_loop_end_time := Unix.gettimeofday ()) ;
+                  Rrdd_shared.last_loop_end_time := Unix.gettimeofday ()
+              ) ;
               Thread.delay !Rrdd_shared.timeslice
             with _ ->
               debug
@@ -740,7 +782,9 @@ let monitor_write_loop writers =
                  then restarting." ;
               log_backtrace () ;
               Thread.delay 10.
-          done))
+          done
+      )
+    )
     ()
 
 (* Monitoring code --- END. *)
@@ -762,7 +806,8 @@ module GCLog : GCLOG = struct
             info "GC free_words = %d" stat.Gc.free_words ;
             Thread.delay 180.0
           with e -> error "RRD GC logging: %s" (Printexc.to_string e)
-        done)
+        done
+      )
       ()
 end
 
@@ -874,7 +919,8 @@ module Discover : DISCOVER = struct
           with e ->
             error "RRD plugin discovery error: %s" (Printexc.to_string e) ;
             Thread.delay 10.0
-        done)
+        done
+      )
       directory
 end
 
@@ -883,7 +929,8 @@ let options =
     ( "plugin-default"
     , Arg.Set Rrdd_shared.enable_all_dss
     , (fun () -> string_of_bool !Rrdd_shared.enable_all_dss)
-    , "True if datasources provided by plugins should be exported by default" )
+    , "True if datasources provided by plugins should be exported by default"
+    )
   ]
 
 let doc =
@@ -911,9 +958,11 @@ let configure_writers () =
         snd
           (Rrd_writer.FileWriter.create
              {path; shared_page_count= n_pages}
-             Rrd_protocol_v2.protocol)
+             Rrd_protocol_v2.protocol
+          )
       in
-      (name, writer))
+      (name, writer)
+    )
     stats_to_write
 
 (** we need to make sure we call exit on fatal signals to make sure profiling
@@ -964,11 +1013,13 @@ let _ =
               ~rpc_fn:(Idl.Exn.server Rrdd_bindings.Server.implementation)
               ()
           in
-          Debug.with_thread_associated "main" Xcp_service.serve_forever server)
+          Debug.with_thread_associated "main" Xcp_service.serve_forever server
+      )
       ()
   in
   start (!Rrd_interface.default_path, !Rrd_interface.forwarded_path) (fun () ->
-      Idl.Exn.server Rrdd_bindings.Server.implementation) ;
+      Idl.Exn.server Rrdd_bindings.Server.implementation
+  ) ;
   ignore
   @@ Discover.start
        (List.map (fun (name, _) -> writer_basename name) stats_to_write) ;
diff --git a/rrddump/rrddump.ml b/rrddump/rrddump.ml
index 8e811aec5..cd0f1675f 100644
--- a/rrddump/rrddump.ml
+++ b/rrddump/rrddump.ml
@@ -21,7 +21,8 @@ let text_export rrd =
       -. Int64.to_float
            (Int64.mul
               (Int64.of_int (rra.rra_pdp_cnt * rra.rra_row_cnt))
-              rrd.timestep)
+              rrd.timestep
+           )
     in
     Printf.printf "start=%f\n" start ;
     let rra_timestep = Int64.mul rrd.timestep (Int64.of_int rra.rra_pdp_cnt) in
@@ -38,7 +39,9 @@ let text_export rrd =
              (cf_type_to_string rra.rra_cf)
              (Int64.mul
                 (Int64.of_int (rra.rra_pdp_cnt * rra.rra_row_cnt))
-                rrd.timestep))
+                rrd.timestep
+             )
+          )
       in
       let rec do_data i accum =
         if time i < Int64.of_float start || i >= rra.rra_row_cnt then
@@ -49,7 +52,8 @@ let text_export rrd =
       let data = do_data 0 [] in
       List.iter
         (fun (t, d) ->
-          if not (Utils.isnan d) then Printf.fprintf oc "%Ld %f\n" t d)
+          if not (Utils.isnan d) then Printf.fprintf oc "%Ld %f\n" t d
+        )
         data ;
       close_out oc
     done
-- 
2.31.1

